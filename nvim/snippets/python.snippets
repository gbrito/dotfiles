snippet pdb "pdb debug"
	import pdb; pdb.set_trace();

snippet itest "odoo test"
	from odoo.tests import SavepointCase


	class ${1}(SavepointCase):

		@classmethod
		def setUpClass(cls):
			super().setUpClass()
			${2}

snippet imodel "import model"
	from odoo import models
	${1}

snippet fi "import from"
	from . import ${1}

snippet ifield "odoo import"
	from odoo import _, api, fields, models
	${1}

snippet isuperuser "odoo import superuser"
	from odoo import SUPERUSER_ID

snippet copyright "Copyright header"
    # -*- coding: utf-8 -*-
    # Copyright (c) `strftime("%Y")` ERP|OPEN <https://www.erpopen.nl>
    # License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl.html).
    ${0}

snippet module "Odoo Manifest"
	{
		"name": "${1:Module name}",
		"summary": "${2:Module summary}",
		"version": "${3:16.0}.1.0.0",
		"website": "${4:https://www.erpopen.nl}",
		"author": "${5:ERP|OPEN}",
		"license": "LGPL-3",
		"depends": [
			"${6:base}",
		],
		"data": [
			"${7}",
		],
		"external_dependencies": {
			"python": [],
			"bin": [],
		},
		"application": False,
		"installable": True,
	}

snippet oo "Odoo Model"
	class ${1}(models.Model):
		_name = "${2}"
		_description = "${3}"

		${4}


snippet ooi "Odoo Model Inherit"
	class ${1}(models.Model):
		_inherit = "${2}"

		${3}


snippet oow "Odoo Wizard"
	class ${1}(models.Transientmodel):
		_name = "${2}"
		_description = "${3}"

		${4}

snippet oowi "Odoo Wizard Inherit"
	class ${1}(models.Transientmodel):
		_inherit = "${2}"

		${3}

snippet fch "char"
	${1:fieldname} = fields.Char(${2})
	${3}

snippet fint "integer"
	${1:fieldname} = fields.Integer(${2})
	${3}

snippet ffl "float"
	${1:fieldname} = fields.Float(${2:})
	${4}

snippet fbo "boolean"
	${1:fieldname} = fields.Boolean(${2:})
	${3}

snippet fdt "date"
	${1:fieldname} = fields.Date(${2})
	${3}

snippet fdti "datetime"
	"${1:fieldname}": fields.Datetime("${2:Label}", ${3}),${4}

snippet fsl "selection"
	${1:fieldname} = fields.Selection([
		${2:("", "")}
		],
		${3})
	${4}

snippet fm2o "many2one"
	${1:fieldname}_id = fields.Many2one(
		"${2:ObjectName}",
		${3})${4}

snippet fm2m "many2many"
	${1:fieldname}_ids = fields.Many2many(
		comodel_name="${2:ObjectName}",
		${3})${4}

snippet fo2m "one2many"
	${1:fieldname}_ids = fields.One2many(
		"${2:object.name}",
		"${3:fieldname}_id",
		${4})${5}

snippet ftx "text"
	${1:fieldname} = fields.Text(${2})${3}

snippet fbin "binary"
	"${1:fieldname}": fields.binary("${2:Label}", ${4}help="${3:Help note}"),${5}

snippet cpt "compute"
	compute="_compute_${1}",${2}

snippet fcpt " function compute"
	def _compute_${1}(self):
		for record in self:
			${2}

snippet domain
	domain=[("${1:state}", "${2:=}", "${3:done}")]

snippet help
	help="${1:Help about Field}",

snippet readonly
	readonly=True

snippet required
	required=True,

snippet translate argument
	translate=True

snippet fcreate "def create"
	@api.model_create_multi
	def create(self, vals_list):
		${1}
		records = super(${2:ClassName}, self).create(vals_list)
		${3}
		return records

snippet fwrite "def write"
	def write(self, vals):
		${1}
		res = super(${2:ClassName}, self).write(vals)
		${3}
		return res

snippet browse
	self.browse(${1:ids})

snippet search
	self.search([("${1:state}", "${2:=}", "${3:done}")])

snippet create
	self.create(${1:vals})

snippet write
	self.write(${1:vals})

snippet unlink
	self.unlink()

snippet _ "_description"
	_description = ${1:Object description}

snippet _ "_order"
	_order = "${1:Field name to order}"


snippet _ "_rec_name"
	_rec_name = "${1:Field name}"

snippet _ "_sequence"
	_sequence = "${1:Field name use as sequence}"

snippet _ "_sql_constraints"
	_sql_constraints = [
		("${1:Field name}_uniq", "unique ($1)", "The $1 must be unique!"),
	]

snippet . "search"
	.search(${1:domain}, limit=${3:None}, order=${4:None})

snippet . "browse"
	.browse($(1:ids))

snippet . "create"
	.create(${1:vals})

snippet . "write"
	.write(${1:vals})

snippet . "unlink"
	.unlink()

snippet raise "raise UserError"
	raise UserError(_("${1:Error}"))

snippet raise "raise ValidationError"
	raise ValidationError(_("${1:Error}"))

snippet cr "cr.execute()"
	cr.execute("""${1:Query}""")

snippet cr "cr.commit()"
	cr.commit()

snippet cr "cr.rollback()"
	cr.rollback()

snippet cr "cr.close()"
	cr.close()

snippet cr "cr.autocommit()"
	cr.autocommit(${1:True})

snippet cr "cr.fetchall()"
	cr.fetchall()

snippet cr "cr.dictfetchall()"
	cr.dictfetchall()

snippet cr "cr.fetchone()"
	cr.fetchone()

snippet sequence
	"sequence": fields.integer("${1:Sequence}"),${2}

snippet logger
	import logging
	_logger = logging.getLogger(__name__)

snippet log "Debug"
	logger.debug("${1}")

snippet log "Info"
	logger.info("${1}")

snippet log "Warning"
	logger.warning("${1}")

snippet log "Error"
	logger.error("${1}")

snippet super
	super(${1:ClassName}, self).${2:methodName}(cr, uid, ${3:ids}, ${4}context=context)${5}

snippet def
	def ${1:fname}(${2:`indent(".") ? "self" : ""`}):
		"""${3:docstring for $1}"""
		${4:pass}

snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}

snippet self.
	self.${1:method}(${2})

snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}

snippet try "Try/Except/Else"
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}

snippet try "Try/Except/Finally"
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}

snippet try "Try/Except/Else/Finally"
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
	${6:pass}

snippet ifmain
	if __name__ == "__main__":
		${1:main()}
