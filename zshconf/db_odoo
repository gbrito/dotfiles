#!/usr/bin/env bash

function check_filestore() {
    echo "Im checking"
}

function db_odoo_reset() {
    # arg$1 - Database name
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    echo "Deactivating Crons"
    # Deactivate crons
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "update ir_cron set active = false;"
    # Delete mail servers
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from fetchmail_server;"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_mail_server;"

    db_odoo_fix_code "$1"
    db_odoo_admin "$1"
    db_odoo_remove_report_url "$1"
    db_odoo_disable_users_totp "$1"
    echo "Database $1 ready for test"
}

function db_odoo_fix_code() {
    # arg$1 - Database name
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    export PGPASSWORD=odoo
    db_name=$1
    uuid=$(uuidgen)
    today_date="$(date -d '+1 year' +'%Y-%m-%d %H:%M:%S')"

    echo "Delete enterprise code"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_config_parameter where key like '%enterprise_code%';"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "update ir_config_parameter set value = '${uuid}' where key like '%uuid%';"
    echo "Update database create date"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "update ir_config_parameter set value = '${today_date}' where key = 'database.expiration_date';"
}

function db_odoo_remove_report_url() {
    # arg$1 - Database name
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    echo "Deleting report.url key"
    export PGPASSWORD=odoo
    db_name=$1
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_config_parameter where key = 'report.url';"
}

function db_odoo_disable_users_totp() {
    # arg$1 - Database name
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    echo "Disable two factor authentication"
    export PGPASSWORD=odoo
    db_name=$1
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "update res_users set totp_secret = null;"
}

function db_odoo_disable_customziation() {
    # arg$1 - Database name
    # arg$2 - user_id
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi

    user_id=2
    if [[ $# -eq 2 ]] ; then
        user_id=$2
    fi

    echo "Disable studio and extra customization"
    export PGPASSWORD=odoo
    db_name=$1
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_ui_view where create_uid = ${user_id};"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_model_fields where create_uid = ${user_id};"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "delete from ir_model where create_uid = ${user_id};"
}

function db_odoo_admin() {
    # arg$1 - Database name
    # arg$2 - Login to reset password
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    export PGPASSWORD=odoo
    db_name=$1
    db_login="admin"
    if [[ $# -eq 2 ]] ; then
        db_login=$2
    fi
    echo "Changing admin password for user {$db_login}"
    psql -h 127.0.0.1 -p 5432 -U odoo -w -d "${db_name}" -c "update res_users set password = 'admin' where login = '${db_login}';"

}

function db_restore() {
    # arg$1 - Database name to restore into
    # arg$2 - Dump of the database .sql
    # arg$3 - 1 if you dont want to clean the database
    if [[ $# -eq 0 ]] ; then
        echo 'No db name given. exiting'
        return 1
    fi
    export PGPASSWORD=odoo
    db_name=$1
    restore_file=$2
    dropdb -h 127.0.0.1 -p 5432 -U odoo -w --if-exists "${db_name}"
    createdb -h 127.0.0.1 -p 5432 -U odoo -w "${db_name}"
    # Load sql dump
    psql -h 127.0.0.1 -p 5432 -U odoo -w "${db_name}" < "${restore_file}"
    if [[ $3 != '1' ]]; then
        db_odoo_reset "$1"
    fi
    echo Restored db "$1"
}

function db_backup {
    # arg$1 - Database name to backup
    # arg$2 - boolean with default false. If true is passed,
    #         database will be compressed to be send to odoo for upgrading
    if [[ $# -eq 0 ]]; then
        echo No database name entered, exiting
        return 1
    fi
    export PGPASSWORD=odoo
    database=$1
    now="$(date +'%Y_%m_%d_%H_%M_%S')"
    echo Going to backup "$1" database, please wait
    if [[ $2 = true ]]; then
        output_file="$1_bak_$now.gz"
        pg_dump -h 127.0.0.1 -p 5432 -U odoo -w -v "$1" | gzip -9 > "$output_file"
    else
        output_file="$1_bak_$now.sql"
        pg_dump -h 127.0.0.1 -p 5432 -U odoo -w -v "$1" > "$output_file"
    fi
    echo Backup for database can be found @ "$output_file"
}

function db_dump {
    if [[ $# -eq 0 ]]; then
        echo "No database name provided. Doing nothing."
        return 1
    fi
    database="$1"
    if [[ $# -eq 2 ]]; then
        output_file="$2.dump"
    else
        output_file="$1.dump"
    fi
    export PGPASSWORD=odoo
    pg_dump -h 127.0.0.1 -p 5432 -U odoo -w -F c -f "${output_file}" "${database}"
    echo "Database dump of $database to $output_file done."
}

function db_dump_restore {
    if [[ $# -eq 0 ]]; then
        echo "No database name provided. Doing nothing."
        return 1
    fi
    export PGPASSWORD=odoo
    db_name=$1
    restore_file=$2
    echo "Create an empty database ${db_name}"
    dropdb -h 127.0.0.1 -p 5432 -U odoo -w --if-exists "${db_name}"
    createdb -h 127.0.0.1 -p 5432 -U odoo -w "${db_name}"
    # Load dump
    echo "Start restoring ${restore_file} in ${db_name}"
    pg_restore -h 127.0.0.1 -p 5432 -U odoo -w --no-owner --no-acl -d "${db_name}" < "${restore_file}"
    if [[ $3 != '1' ]]; then
        db_odoo_reset "$1"
    fi
    echo "Restored database ${db_name}"
}

function db_drop {
    if [[ $# -eq 0 ]]; then
        echo "No database name provided. Doing nothing."
        return 1
    fi
    database="$1"
    export PGPASSWORD=postgres
    psql -h 127.0.0.1 -p 5432 -U postgres -w -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity where datname = '$database' and pid <> pg_backend_pid();"
    export PGPASSWORD=odoo
    dropdb -h 127.0.0.1 -p 5432 -U odoo -w --if-exists "${database}"
    echo "Dropped database $database "
}

function db_con {
    if [[ $# -eq 0 ]]; then
        echo "No database name provided. Doing nothing."
        return 1
    fi

    export PGPASSWORD=odoo
    database="$1"
    psql -h 127.0.0.1 -p 5432 -U odoo -w "$database"
}

function db_list {
    export PGPASSWORD=odoo
    psql -h 127.0.0.1 -p 5432 -U odoo -w --list
}
