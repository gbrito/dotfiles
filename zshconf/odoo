#!/usr/bin/env bash

alias odoo18_venv="source /opt/odoo18/odoo18-venv/bin/activate"
alias odoo17_venv="source /opt/odoo17/odoo17-venv/bin/activate"
alias odoo16_venv="source /opt/odoo16/odoo16-venv/bin/activate"
alias odoo15_venv="source /opt/odoo15/odoo15-venv/bin/activate"
alias odoo14_venv="source /opt/odoo14/odoo14-venv/bin/activate"
alias odoo13_venv="source /opt/odoo13/odoo13-venv/bin/activate"
alias odoo12_venv="source /opt/odoo12/odoo12-venv/bin/activate"
alias odoo11_venv="source /opt/odoo11/odoo11-venv/bin/activate"
alias odoo10_venv="source /opt/odoo10/odoo10-venv/bin/activate"

alias odoo18_python="uv run /opt/odoo18/odoo18-venv/bin/python3 -s"
alias odoo17_python="/opt/odoo17/odoo17-venv/bin/python3"
alias odoo16_python="/opt/odoo16/odoo16-venv/bin/python3"
alias odoo15_python="/opt/odoo15/odoo15-venv/bin/python3"
alias odoo14_python="/opt/odoo14/odoo14-venv/bin/python3"
alias odoo13_python="/opt/odoo13/odoo13-venv/bin/python3"
alias odoo12_python="/opt/odoo12/odoo12-venv/bin/python3"
alias odoo11_python="/opt/odoo11/odoo11-venv/bin/python3"
alias odoo10_python="/opt/odoo10/odoo10-venv/bin/python"

alias odoo18="odoo18_python /opt/odoo18/odoo/odoo-bin"
alias odoo17="odoo17_python /opt/odoo17/odoo/odoo-bin"
alias odoo16="odoo16_python /opt/odoo16/odoo/odoo-bin"
alias odoo15="odoo15_python /opt/odoo15/odoo/odoo-bin"
alias odoo14="odoo14_python /opt/odoo14/odoo/odoo-bin"
alias odoo13="odoo13_python /opt/odoo13/odoo/odoo-bin"
alias odoo12="odoo12_python /opt/odoo12/odoo/odoo-bin"
alias odoo11="odoo11_python /opt/odoo11/odoo/odoo-bin"
alias odoo10="odoo10_python /opt/odoo10/odoo/odoo-bin"

function find_odoo_config() {
    # Search for config/odoo{number}.conf
    current_dir=$(pwd)
    for _ in {1..5}
    do
        if [[ "$current_dir" != "$HOME"* ]]; then
            break
        fi

        unset config_file
        config_file=$(find "$current_dir" -maxdepth 2 -mindepth 1 -type f -name 'odoo[0-9][0-9].conf' | head -1)
        if [ -n "$config_file" ]; then
            echo "$config_file"
            break
        fi
        current_dir="$(dirname "$current_dir")"
    done
}

function find_odoo_version() {
    if [ -z "$1" ]; then
        return
    fi
    echo "$config" | grep -o -E '[0-9]+' | tail -1
}

function odoo() {
    # Identify and run odoo based on found config file

    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return
    fi

    odoo_version=$(find_odoo_version "$config")
    if [ -z "$odoo_version" ]; then
        echo "Error: Unable to detect odoo version from: $config"
        return
    fi

    if [ "$VIRTUAL_ENV" ]; then
        deactivate
    fi
    eval "odoo${odoo_version}_venv"

    if [ "$1" = "shell" ] || [ "$1" = "upgrade_code" ]; then
        eval "odoo$odoo_version $1 -c $config"
    else
        eval "odoo$odoo_version -c $config $*"
    fi
}

function venv_odoo() {
    # Identify and start odoo virtual env based on found config file
    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return 0
    fi

    odoo_version=$(find_odoo_version "$config")
    if [ -z "$odoo_version" ]; then
        echo "Error: Unable to detect odoo version from: $config"
        return 0
    fi

    if [ "$VIRTUAL_ENV" ]; then
        deactivate
    fi

    eval "odoo${odoo_version}_venv"
    return 1
}

function install_odoo_modules() {
    # Install all modules in the current directory
    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return
    fi

    db_name=$(grep -m1 -oP '^\s*db_name\s*=\s*\K.*' "$config")
    if [ -z "$db_name" ]; then
        echo "Error: No database name found in config file"
        return
    fi
    db_drop "$db_name" >/dev/null 2>&1

    for module_path in */
    do
        [ -d "$module_path" ] || continue
        module=${module_path%/}
        echo "Installing $module"
        odoo -i "$module" --stop-after-init;
        db_drop "$db_name" >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: Failed to install $module"
            return
        fi
    done
}

