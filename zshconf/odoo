#!/usr/bin/env bash

alias odoo19_venv="source /opt/odoo19/odoo19-venv/bin/activate"
alias odoo18_venv="source /opt/odoo18/odoo18-venv/bin/activate"
alias odoo17_venv="source /opt/odoo17/odoo17-venv/bin/activate"
alias odoo16_venv="source /opt/odoo16/odoo16-venv/bin/activate"
alias odoo15_venv="source /opt/odoo15/odoo15-venv/bin/activate"
alias odoo14_venv="source /opt/odoo14/odoo14-venv/bin/activate"
alias odoo13_venv="source /opt/odoo13/odoo13-venv/bin/activate"
alias odoo12_venv="source /opt/odoo12/odoo12-venv/bin/activate"
alias odoo11_venv="source /opt/odoo11/odoo11-venv/bin/activate"
alias odoo10_venv="source /opt/odoo10/odoo10-venv/bin/activate"

function find_odoo_config() {
    # Search for config/odoo{number}.conf
    current_dir=$(pwd)
    for _ in {1..5}
    do
        if [[ "$current_dir" != "$HOME"* ]]; then
            break
        fi

        unset config_file
        config_file=$(find "$current_dir" -maxdepth 2 -mindepth 1 -type f -name 'odoo[0-9][0-9].conf' | head -1)
        if [ -n "$config_file" ]; then
            echo "$config_file"
            break
        fi
        current_dir="$(dirname "$current_dir")"
    done
}

function find_odoo_version() {
    if [ -z "$1" ]; then
        return
    fi
    echo "$1" | grep -o -E '[0-9]+' | tail -1
}

function odoo() {
    # Identify and run odoo based on found config file

    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return
    fi

    odoo_version=$(find_odoo_version "$config")
    if [ -z "$odoo_version" ]; then
        echo "Error: Unable to detect odoo version from: $config"
        return
    fi

    if [ "$VIRTUAL_ENV" ]; then
        if type deactivate >/dev/null 2>&1; then
            deactivate
        fi
    fi
    eval "odoo${odoo_version}_venv"

    # Build the full command instead of using alias
    local python_cmd="UV_PROJECT_ENVIRONMENT=/opt/odoo${odoo_version}/odoo${odoo_version}-venv /opt/odoo${odoo_version}/odoo${odoo_version}-venv/bin/python3 -u"
    local odoo_bin="/opt/odoo${odoo_version}/odoo/odoo-bin"

    # Special case for odoo10 which doesn't have UV_PROJECT_ENVIRONMENT
    if [ "$odoo_version" = "10" ]; then
        python_cmd="/opt/odoo10/odoo10-venv/bin/python"
    fi

    # Always use script for proper PTY allocation (needed for pdb debugging)
    if [ "$1" = "shell" ] || [ "$1" = "upgrade_code" ]; then
        script -q -c "$python_cmd $odoo_bin $1 -c $config" /dev/null
    else
        script -q -c "$python_cmd $odoo_bin -c $config $*" /dev/null
    fi
}

function venv_odoo() {
    # Identify and start odoo virtual env based on found config file
    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return 0
    fi

    odoo_version=$(find_odoo_version "$config")
    if [ -z "$odoo_version" ]; then
        echo "Error: Unable to detect odoo version from: $config"
        return 0
    fi

    if [ "$VIRTUAL_ENV" ]; then
        deactivate
    fi

    eval "odoo${odoo_version}_venv"
    return 1
}

function install_odoo_modules() {
    # Install specified modules or all modules in the current directory
    config=$(find_odoo_config)
    if [ -z "$config" ]; then
        echo "Error: No configuration file"
        return
    fi

    db_name=$(grep -m1 -oP '^\s*db_name\s*=\s*\K.*' "$config")
    if [ -z "$db_name" ]; then
        echo "Error: No database name found in config file"
        return
    fi
    db_drop "$db_name" >/dev/null 2>&1

    # Check if first argument is "keep"
    local keep_db=false
    local modules_start_index=1
    if [[ "$1" == "keep" ]]; then
        keep_db=true
        modules_start_index=2
        echo "Keeping database $db_name for all module installation"
    else
        echo "Creating a new database $db_name for each module installation"
    fi

    # Get modules list
    local -a modules
    if [ $# -ge $modules_start_index ]; then
        shift $((modules_start_index - 1))

        for arg in "$@"; do
            # Split each argument by comma (handles comma-separated lists)
            # Use zsh-compatible array splitting
            local IFS=','
            local -a split_mods
            split_mods=(${=arg})
            for module in $split_mods; do
                # Trim whitespace and skip empty entries
                module=${module// /}
                if [[ -n "$module" ]]; then
                    modules+=($module)
                fi
            done
        done
    else
        # No modules specified, use all directories in current path
        for module_path in */; do
            [ -d "$module_path" ] || continue
            modules+=(${module_path%/})
        done
    fi

    # Install each module
    for module in "${modules[@]}"; do
        echo "Installing $module"
        odoo -i $module --stop-after-init
        local exit_code=$?
        # Check exit code
        if [ $exit_code -ne 0 ]; then
            # Exit code 130 means interrupted by Ctrl-C
            if [ $exit_code -eq 130 ]; then
                echo "Installation interrupted by user"
                return 130
            fi
            echo "Error: Failed to install $module (exit code: $exit_code)"
            return 1
        fi

        if [ "$keep_db" = false ]; then
            db_drop "$db_name" >/dev/null 2>&1
        fi
    done
}
